*sideways.txt*	Move an item in a delimiter-separated list left or right

==============================================================================
CONTENTS                                           *sideways* *sideways-contents*

    Installation............................: |sideways-installation|
    Usage...................................: |sideways-usage|
    Customization...........................: |sideways-customization|
    Settings................................: |sideways-settings|
    Issues..................................: |sideways-issues|


==============================================================================
INSTALLATION                                            *sideways-installation*

The easiest way to install the plugin is with a plugin manager:

- vim-plug: https://github.com/junegunn/vim-plug
- Vundle:   https://github.com/VundleVim/Vundle.vim

If you use one, just follow the instructions in its documentation.

You can install the plugin yourself using Vim's |packages| functionality by
cloning the project (or adding it as a submodule) under
`~/.vim/pack/<any-name>/start/`. For example:
>
    git clone https://github.com/AndrewRadev/sideways.vim ~/.vim/pack/_/start/sideways
<
This should automatically load the plugin for you on Vim start. Alternatively,
you can add it to `~/.vim/pack/<any-name>/opt/` instead and load it in your
.vimrc manually with:
>
    packadd sideways
<
If you'd rather not use git, you can download the files from the "releases"
tab and unzip them in the relevant directory:
https://github.com/AndrewRadev/sideways.vim/releases.

==============================================================================
USAGE                                                           *sideways-usage*
                                                                *SidewaysLeft*
                                                                *SidewaysRight*

The plugin defines two commands, |:SidewaysLeft| and |:SidewaysRight|, which
move the item under the cursor left or right, where an "item" is defined by a
delimiter. As an example:
>
    def function(one, two, three):
        pass
<
Placing the cursor on "two" and executing |:SidewaysLeft|, the "one" and "two"
arguments will switch their places, resulting in this:
>
    def function(two, one, three):
        pass
<
In this case, the delimiter is a comma. The plugin currently works with
various other cases and it's intended to make the process configurable. While
this particular example is in python, this should work for arguments in many
different languages that use round braces to denote function calls.

For ruby and eruby, it detects method calls without braces as well:
>
    link_to user_registration_path, 'Something'
    # changes to:
    link_to 'Something', user_registration_path
<
Apart from functions, it works for square-bracket lists in dynamic languages:
>
    list = [one, [two, four, five], three]
<
If you experiment with this example, you'll find that you can move the entire
second list around, as long as the cursor is on one of the inner brackets. The
plugin takes into consideration nested structures.

It also works for multiline lists. Try experimenting with this example:
>
    <div class="example"
         style="color: red;"
         something="other">
      Example
    </div>
<
Syntax skipping ~

The plugin will try to be smart and ignore text in any syntax groups that
include "Comment" and "String". Some filetype-specific definitions have a
bigger list of groups, see the "skip_syntax" sections of the definitions.

If you'd like to skip specific syntax groups (or not skip anything at all),
you can use the |b:sideways_skip_syntax| buffer-local variable. See below in
|sideways-settings| for detailed instructions.

Mappings ~

It's highly recommended to map the two main commands to convenient keys. For
example, mapping them to <c-h> and <c-l> would look like this:
>
    nnoremap <c-h> :SidewaysLeft<cr>
    nnoremap <c-l> :SidewaysRight<cr>
<
Supported definitions ~

Other things that sideways works for:

CSS declarations:
>
    a { color: #fff; background: blue; text-decoration: underline; }
<
Lists within CSS declarations:
>
    border-radius: 20px 0 0 20px;
<
HTML attributes:
>
    <input name="one" id="two" class="three" />
<
Contents of HTML `class` and `style` values:
>
    <div class="one two three" style="width: 100px; height: 50px;"></div>
<
Handlebars components:
>
    {{parent/some-component one=two three="four" five=(action 'six')}}
<
Markdown and cucumber tables:
>
    Examples:
      | input_1 | input_2 | button | output |
      | 20      | 30      | add    | 50     |
      | 2       | 5       | add    | 7      |
      | 0       | 40      | add    | 40     |
<
Rust template arguments:
>
    let dict = Hash<String, Vec<String>>::new();
<
Rust trait bounds (separated with "+"):
>
    fn foo<T: Copy + Clone>() { }
<
Rust return type (a special case since there's always just one, useful as a text object):
>
    fn example() -> Result<String, String> {
<
Go lists:
>
    []string{"One", "Two", "Three"}
<
C++ templates:
>
    /*
     * Relies on "<" being surrounded by non-whitespace, or considers it a
     * comparison. Parsing C++ is tricky.
     */
    std::unordered_map<k, v>()
<
Javascript-like objects:
>
    dict = {one: 1, two: 2, three: 3}
<
OCaml lists and arrays
>
    let xs = [1; 2; 3]
    let xs = [|1; 2; 3|]
<
LaTeX align/tabular
>
    \begin{tabular}{ll}
      a & b \\
      c & d
    \end{tabular}
<
LaTeX equations
>
    \[ e^{i \pi} + 1 = 0 \]
    \[e^x = \sum_{n = 0}^{\infty} \frac{x^n}{n!}\]
<
Typescript enum values
>
    interface Status {
      code: 200 | 404 | 500;
    }
<

See |sideways-customization| for instructions on how to add more definitions
or override existing ones.

                                                            *SidewaysJumpLeft*
                                                            *SidewaysJumpRight*

Text objects: ~

The plugin's machinery makes it easy to implement an "argument" text object.
There are two mappings provided:
>
    <Plug>SidewaysArgumentTextobjA
    <Plug>SidewaysArgumentTextobjI
<
These are the outer and inner text objects, respectively. To use them, you
need to create mappings in your configuration files. Something like this:
>
    omap aa <Plug>SidewaysArgumentTextobjA
    xmap aa <Plug>SidewaysArgumentTextobjA
    omap ia <Plug>SidewaysArgumentTextobjI
    xmap ia <Plug>SidewaysArgumentTextobjI
<
This will map the "a" text object to operate on an "argument". So, you can
perform `daa` to delete an argument, `cia` to change an argument, and so on.
See |text-objects| for more information.

The plugin also provides the commands |:SidewaysJumpLeft| and
|:SidewaysJumpRight|, which move the cursor left and right by items.

Also, a useful plugin to use alongside sideways is `fieldtrip`
(https://github.com/tek/vim-fieldtrip). This defines a submode
(https://github.com/kana/vim-submode) for sideways.vim.

Adding items: ~

The plugin defines mappings to add new items to the list as well. There's four
of them that mirror the |i|, |a|, |I|, and |A| built-in keybindings:
>
    <Plug>SidewaysArgumentInsertBefore
    <Plug>SidewaysArgumentAppendAfter
    <Plug>SidewaysArgumentInsertFirst
    <Plug>SidewaysArgumentAppendLast
<
However, they're not mapped by default and you need to pick ones that are
convenient for you. As an example:
>
    nmap <leader>si <Plug>SidewaysArgumentInsertBefore
    nmap <leader>sa <Plug>SidewaysArgumentAppendAfter
    nmap <leader>sI <Plug>SidewaysArgumentInsertFirst
    nmap <leader>sA <Plug>SidewaysArgumentAppendLast
<
The mnemonic in this case would be `leader-"sideways"-action`. Given the
following simple example in ruby:
>
    function_call(one, two, three)
<
With the cursor on "two", you can insert a new argument before the current
item by using `<Plug>SidewaysArgumentInsertBefore`:
>
    function_call(one, NEW, two, three)
<
Add an item after the current one by using
`<Plug>SidewaysArgumentAppendAfter`:
>
    function_call(one, two, NEW, three)
<
Prepend an item to the start of the list with
`<Plug>SidewaysArgumentInsertFirst`:
>
    function_call(NEW, one, two, three)
<
Push an item at the end with `<Plug>SidewaysArgumentAppendLast`:
>
    function_call(one, two, three, NEW)
<
This should work for all lists that are supported for the plugin, including
HTML attributes, semicolon-separated CSS declarations, etc. If each existing
list item is on a separate line (and there's at least two), the plugin assumes
the new item should be on a new line as well:
>
    function_call(
      one,
      two,
      three
    )

    # Append an item at the end:
    function_call(
      one,
      two,
      three,
      NEW
    )
<
Again, these mappings are not created by default -- copy the suggested ones to
your vimrc, or create your own.

If you set |g:sideways_add_item_cursor_restore| to 1 and your vim has the
|+textprop| feature, the plugin will jump back to where you triggered the
mapping when you leave insert mode.

Note, however, that this relies on the |InsertLeave| autocommand, so if you
exit insert mode via Ctrl+C (which doesn't trigger it), it won't jump until
the next time you leave insert mode normally. If exiting via Ctrl+C is a part
of your workflow, it's recommended you keep this setting off.


==============================================================================
CUSTOMIZATION                                           *sideways-customization*

The core of the plugin is a loop that takes a "definition" and tries to parse
a sequence of items based on it. Here's an example definition, which matches
items in bracketed lists:
>
    let example_definition = {
          \   'start':     '(\_s*',
          \   'end':       ')',
          \   'delimiter': ',\_s*',
          \   'brackets':  ['([{''"', ')]}''"'],
          \ }
<
The most important parts are the `start`, `end`, and `delimiter` keys. The
plugin uses them to find the `start` of the list, and then moves forward,
character by character, until it gets to something matching the `end` pattern.
Every time it hits a `delimiter`, it marks the coordinates of what it has so
far as a separate item.

The `brackets` array needs to always be present and have exactly 2 strings.
The first one is all the opening brackets expected in the list, and the other
is the matching closing brackets, including string quotes that have the same
opener and closer. When the plugin hits an opening bracket, it jumps to the
closing one, which is what ensures that it can handle nested lists. If it hits
an unmatched closing bracket, it assumes that this list is inside of some
other one and considers it the end of the list.

You can try the above definition by positioning the cursor on a round-bracket
list and running:
>
    echo sideways#parsing#Parse([example_definition])
<
You should get an array of two items -- the first one is going to be the
definition you just passed in (if you pass a list of multiple definitions, the
plugin is going to return the "best" one that works). The second items is
going to be a list of dictionaries, each one having the keys `start_line`,
`start_col`, `end_line`, `end_col`. That's the raw parsing data the plugin
uses to do its magic.

There are multiple other flags and properties that can be given to a definition:

- `delimited_by_whitespace`: Indicates the items are delimited by whitespace,
    like HTML attributes. You still need to have a delimiter, it's just an
    indicator for the plugin.
- `single_line`: Indicates that there's no need to keep going after the end of
    the line. An optimization, but also necessary for some particular kinds of
    lists.
- `skip_syntax`: A list of syntax group regexes to ignore when checking for
    brackets or delimiters. It defaults to `['Comment', 'String']`, which
    usually works well. Can also be provided on a per-filetype basis with
    `b:sideways_skip_syntax`.

These are a bit messy and more might be added, because a lot of them are
workarounds. The plugin works well in the general case, but there's a lot of
specific cases, and adding a special flag can be an easy way to fix support
for something special.

You can look at `plugin/sideways.vim` for the global definitions of the
plugin. All the filetype-specific ones are in
`ftplugin/<filetype>/sideways.vim`. My advice is to explore the patterns
before trying to make your own.

If you want to override the built-in definitions, you can define your own
`g:sideways_definitions` or `b:sideways_definitions` variables and they will
take priority of the built-ins. If you'd like to extend them, you can use
`g:sideways_custom_definitions` and `b:sideways_custom_definitions`. Note that
definitions must have unique `start` and `end` patterns, so if you'd like to
override a specific one, pick the same start and end for it.


==============================================================================
SETTINGS                                                     *sideways-settings*

                                                 *g:sideways_custom_definitions*
                                                 *b:sideways_custom_definitions*
>
    let g:sideways_custom_definitions = []
    let b:sideways_custom_definitions = []
<
Default value: Unset

If these variables exist, they will be merged into the built-in plugin
definitions. See the section |sideways-customization| for more information.


                                                        *b:sideways_skip_syntax*
>
    let b:sideways_skip_syntax = ['javaString']
<
Default value: ['Comment', 'String']

This is a buffer-local setting, which means you should set it per-filetype.
For instance, if you wanted to skip particular syntax groups in the java
filetype, you'd put the let-clause in the file ~/.vim/ftplugin/java.vim.

This specifies the syntax groups that the plugin will skip over when looking
for matching brackets and for the starts of lists. It should be a list of
syntax groups (or rather, parts of syntax groups -- the names are matched with
the |=~#| operator). By default, the plugin skips "Comment" and "String"
syntax items.


                                                     *g:sideways_search_timeout*
>
    let g:sideways_search_timeout = 50
<
Default value: 0

If deleting arguments feels slow, it might be a result of the plugin trying
and failing to find matches. Currently, it tries all possible patterns it has,
so that it can find the one closest to the cursor. It also skips pattern
matches highlighted as strings or comments. That last part seems to be
expensive to do. That's why there's the option of providing a timeout to this
search.

Setting a low number (in milliseconds) should make the search faster. On my
machine, a number as low as 10 works quite well for some examples. However,
the lower the timeout, the higher the odds that a search fails to detect the
right pattern. Say, for a 100-argument function call with nested function
calls as arguments, it might end up failing to detect the pattern. This seems
like an unlikely case, so it depends on how safe you'd like to be.

Setting this to 0 (the default) removes the timeout limitation.

A different thing you can do is disable syntax filtering using the
|g:sideways_skip_strings_and_comments| setting.


                                          *g:sideways_skip_strings_and_comments*
>
    let g:sideways_skip_strings_and_comments = 0
<
Default value: 1

If deleting arguments feels slow, it might be a result of the plugin trying
and failing to find matches. Currently, it tries all possible patterns it has,
so that it can find the one closest to the cursor. It also ignores entries
highlighted as strings or comments. That last part seems to be expensive to
do.

If you'd like to completely disable this filtering, you can set this variable
to 0. This should greatly speed it up, but it would cause issues with
unbalanced brackets in strings or comments.

                                            *g:sideways_add_item_cursor_restore*
>
    let g:sideways_add_item_cursor_restore = 1
<
Default value: 0

If you set this variable to 1 and your vim has the |+textprop| feature, the
plugin will jump back to where you triggered the mapping when you leave insert
mode. By default, it's turned off, since it might be surprising. It could be
useful if you decide to add a new item while doing something else and would
like to get back to it after.

Note, however, that this relies on the |InsertLeave| autocommand, so if you
exit insert mode via Ctrl+C (which doesn't trigger it), it won't jump until
the next time you leave insert mode normally. If exiting via Ctrl+C is a part
of your workflow, it's recommended you keep this setting off.

                                                    *g:sideways_add_item_repeat*
>
    let g:sideways_add_item_repeat = 0
<
Default value: 1

This variable controls whether the plugin will activate vim-repeat for the
mappings to add a new item. The setup for them is a bit more complicated,
which is why this flag exists to disable it if it causes problems.


==============================================================================
ISSUES                                                         *sideways-issues*

Any issues and suggestions are very welcome on the github bugtracker:
https://github.com/AndrewRadev/sideways.vim/issues


vim:tw=78:sw=4:ft=help:norl:
