*sideways.txt*	Move an item in a delimiter-separated list left or right

==============================================================================
CONTENTS                                           *sideways* *sideways-contents*

    Installation............................: |sideways-installation|
    Usage...................................: |sideways-usage|
    Settings................................: |sideways-settings|
    Issues..................................: |sideways-issues|


==============================================================================
INSTALLATION                                            *sideways-installation*

There are several ways to install the plugin. The recommended one is by using
Tim Pope's pathogen (http://www.vim.org/scripts/script.php?script_id=2332). In
that case, you can clone the plugin's git repository like so:
>
    git clone git://github.com/AndrewRadev/sideways.vim.git ~/.vim/bundle/sideways
<
If your vim configuration is under git version control, you could also set up
the repository as a submodule, which would allow you to update more easily.
The command is (provided you're in ~/.vim):
>
    git submodule add git://github.com/AndrewRadev/sideways.vim.git bundle/sideways
<

Another way is to simply copy all the essential directories inside the ~/.vim
directory: plugin, autoload, doc.

==============================================================================
USAGE                                                           *sideways-usage*
                                                                *SidewaysLeft*
                                                                *SidewaysRight*

The plugin defines two commands, |:SidewaysLeft| and |:SidewaysRight|, which
move the item under the cursor left or right, where an "item" is defined by a
delimiter. As an example:
>
    def function(one, two, three):
        pass
<
Placing the cursor on "two" and executing |:SidewaysLeft|, the "one" and "two"
arguments will switch their places, resulting in this:
>
    def function(two, one, three):
        pass
<
In this case, the delimiter is a comma. The plugin currently works with
various other cases and it's intended to make the process configurable. While
this particular example is in python, this should work for arguments in many
different languages that use round braces to denote function calls.

For ruby and eruby, it detects method calls without braces as well:
>
    link_to user_registration_path, 'Something'
    # changes to:
    link_to 'Something', user_registration_path
<
Apart from functions, it works for square-bracket lists in dynamic languages:
>
    list = [one, [two, four, five], three]
<
If you experiment with this example, you'll find that you can move the entire
second list around, as long as the cursor is on one of the inner brackets. The
plugin takes into consideration nested structures.

It also works for multiline lists. Try experimenting with this example:
>
    <div class="example"
         style="color: red;"
         something="other">
      Example
    </div>
<
Syntax skipping ~

The plugin will try to be smart and ignore text in any syntax groups that
include "Comment" and "String". Some filetype-specific definitions have a
bigger list of groups, see the "skip_syntax" sections of the definitions.

If you'd like to skip specific syntax groups (or not skip anything at all),
you can use the |b:sideways_skip_syntax| buffer-local variable. See below in
|sideways-settings| for detailed instructions.

Mappings ~

It's highly recommended to map the two main commands to convenient keys. For
example, mapping them to <c-h> and <c-l> would look like this:
>
    nnoremap <c-h> :SidewaysLeft<cr>
    nnoremap <c-l> :SidewaysRight<cr>
<
Supported definitions ~

Other things that sideways works for:

CSS declarations:
>
    a { color: #fff; background: blue; text-decoration: underline; }
<
Lists within CSS declarations:
>
    border-radius: 20px 0 0 20px;
<
HTML attributes:
>
    <input name="one" id="two" class="three" />
<
Handlebars components:
>
    {{parent/some-component one=two three="four" five=(action 'six')}}
<
Cucumber tables:
>
    Examples:
      | input_1 | input_2 | button | output |
      | 20      | 30      | add    | 50     |
      | 2       | 5       | add    | 7      |
      | 0       | 40      | add    | 40     |
<
Rust template arguments:
>
    let dict = Hash<String, Vec<String>>::new();
<
Rust return type (a special case since there's always just one, useful as a text object):
>
    fn example() -> Result<String, String> {
<
Go lists:
>
    []string{"One", "Two", "Three"}
<
C++ templates:
>
    /*
     * Relies on "<" being surrounded by non-whitespace, or considers it a
     * comparison. Parsing C++ is tricky.
     */
    std::unordered_map<k, v>()
<
Javascript-like objects:
>
    dict = {one: 1, two: 2, three: 3}
<
The plugin is customizable, though at this point you'd need to look at the
source to do this.

                                                            *SidewaysJumpLeft*
                                                            *SidewaysJumpRight*

Bonus functionality: ~

The plugin's machinery makes it easy to implement an "argument" text object.
There are two mappings provided:
>
    <Plug>SidewaysArgumentTextobjA
    <Plug>SidewaysArgumentTextobjI
<
These are the outer and inner text objects, respectively. To use them, you
need to create mappings in your configuration files. Something like this:
>
    omap aa <Plug>SidewaysArgumentTextobjA
    xmap aa <Plug>SidewaysArgumentTextobjA
    omap ia <Plug>SidewaysArgumentTextobjI
    xmap ia <Plug>SidewaysArgumentTextobjI
<
This will map the "a" text object to operate on an "argument". So, you can
perform `daa` to delete an argument, `cia` to change an argument, and so on.
See |text-objects| for more information.

The plugin also provides the commands |:SidewaysJumpLeft| and
|:SidewaysJumpRight|, which move the cursor left and right by items.

Also, a useful plugin to use alongside sideways is `fieldtrip`
(https://github.com/tek/vim-fieldtrip). This defines a submode
(https://github.com/kana/vim-submode) for sideways.vim.

==============================================================================
SETTINGS                                                     *sideways-settings*

                                                        *b:sideways_skip_syntax*
>
    let b:sideways_skip_syntax = ['javaString']
<
Default value: ['Comment', 'String']

This is a buffer-local setting, which means you should set it per-filetype.
For instance, if you wanted to skip particular syntax groups in the java
filetype, you'd put the let-clause in the file ~/.vim/ftplugin/java.vim.

This specifies the syntax groups that the plugin will skip over when looking
for matching brackets and for the starts of lists. It should be a list of
syntax groups (or rather, parts of syntax groups -- the names are matched with
the |=~#| operator). By default, the plugin skips "Comment" and "String"
syntax items.


==============================================================================
ISSUES                                                         *sideways-issues*

Any issues and suggestions are very welcome on the github bugtracker:
https://github.com/AndrewRadev/sideways.vim/issues


vim:tw=78:sw=4:ft=help:norl:
